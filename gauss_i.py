'''
2021.Apr.
返回高斯积分点和权重

'''
import numpy as np

def gauss_point(quadorder, sdim):
    Gauss_p_w = {
        1: [[0],
            [2]],
        2: [[0.577350269189626, -0.577350269189626],
            [1, 1]],
        3: [[0.774596669241483, -0.774596669241483, 0],
            [0.555555555555556, 0.555555555555556, 0.888888888888889]],
        4: [[0.861134311594053, -0.861134311594053, 0.339981043584856, -0.339981043584856],
            [0.347854845137454, 0.347854845137454, 0.652145154862546, 0.652145154862546]],
        5: [[0.906179845938664, -0.906179845938664, 0.538469310105683, -0.538469310105683, 0],
            [0.236926885056189, 0.236926885056189, 0.478628670499366, 0.478628670499366, 0.568888888888889]],
        8: [[0.960289856497536, -0.960289856497536, 0.796666477413627, -0.796666477413627,
             0.525532409916329, -0.525532409916329, 0.183434642495650, -0.183434642495650],
            [0.101228536290376, 0.101228536290376, 0.222381034453374, 0.222381034453374,
             0.313706645877887, 0.313706645877887, 0.362683783378362, 0.362683783378362]]
    }
    [pt, wt] = Gauss_p_w.get(quadorder)

    quadpoint = np.zeros([quadorder ** sdim, sdim]);
    quadweight = np.zeros([quadorder ** sdim, 1]);

    if (sdim == 1):
        return pt, wt

    elif (sdim == 2):
        n = 0
        for i in range(quadorder):
            for j in range(quadorder):
                quadpoint[n, :] = [pt[i], pt[j]]
                quadweight[n] = wt[i] * wt[j]
                n += 1
    elif (sdim == 3):
        n = 0
        for i in range(quadorder):
            for j in range(quadorder):
                for k in range(quadorder):
                    quadpoint[n, :] = [pt[i], pt[j], pt[k]]
                    quadweight[n] = wt[i] * wt[j] * wt[k]
                    n += 1
    else:
        print("请输入合法维度(1,2,3)")

    Q = quadpoint
    W = quadweight

    return Q, W
# [Q,W] = gauss_3d(3,3)
# W
